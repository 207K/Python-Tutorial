.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش ماژول re در پایتون، عبارات باقاعده در پایتون، Regular expression در پایتون، regex در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, تابع, کتابخانه, پایتون, re


درس ۱۵: Regular Expression در پایتون - بخش ۲
============================================================================

**عبارات با قاعده** (**Regular expression**) یا به اختصار **RegEx**، رشته‌ای حاوی کاراکترهایی خاص و با معنی است که در عملیات‌هایی مانند یافتن (find)، جاگذاری (repleace) و اعتبارسنجی (validation) به شدت کاربرد پیدا کرده است. در واقع با استفاده از RegEx می‌توان یک الگو (pattern) برای جستجو در متن یا تطابق آن ایجاد کرد.  [`ویکی‌پدیا <https://en.wikipedia.org/wiki/Regular_expression>`__]

در این درس به شرح قواعد موجود در RegEx و همچنین ماژول ``re`` از کتابخانه استاندارد پایتون خواهیم پرداخت [`اسناد پایتون <https://docs.python.org/3/library/re.html>`__]. ماژول ``re`` یک مجموعه ابزار برای کار با RegEx در پایتون را فراهم آورده است که می‌توان آن را موتور تحلیل RegEx در پایتون دانست.





:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----




توابع جستجو 
~~~~~~~~~~~~~~~~~~~~~

توابع پرکاربرد ماژول ``re`` پایتون مرتبط با عمل جستجو در یک متن عبارتند از: ``finditer``  ``findall``  ``fullmatch``  ``match``  ``search`` که در بخش‌های بعدی به شرح هریک پرداخته خواهد شد.


تابع ``search``
~~~~~~~~~~~~~~~~~~~~~~


``search(pattern, string, flags=0)``

تابع ``search`` به دنبال اولین انطباق pattern در string می‌گردد، در صورت موفقیت یک شی ``Match`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#match-objects>`__] و در غیر این صورت ``None`` برمی‌گرداند [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.search>`__]::


    >>> # Python 2.x
    >>> 
    >>> import re
    >>> 
    >>> match = re.search('Py...n', 'Python is great')
    >>> 
    >>> type(match)
    <type '_sre.SRE_Match'>
    >>> 

::


    >>> # Python 3.x
    >>> 
    >>> import re
    >>> 
    >>> match = re.search('Py...n', 'Python is great')
    >>> 
    >>> type(match)
    <class 're.Match'>


اجازه بدهید یادآوری کنیم که دو نمونه کد زیر عملکردی معادل یکدیگر دارند::


    >>> pattern = re.compile('Py...n')
    >>> match = pattern.search('Python is great')

::

    >>> match = re.search('Py...n', 'Python is great')



شی ``Match`` پایتون
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


::

    >>> pattern = re.compile('Py...n')
    >>> match = pattern.search('Python is great')
    >>> 
    >>> if match:
    ...     print(match.group())
    ... else:
    ...     print("pattern not found")
    ... 
    Python
    >>> 

::

    >>> dir(match)
    ['__class__', '__copy__', '__deepcopy__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'end', 'endpos', 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're', 'regs', 'span', 'start', 'string']

در ادامه به بررسی برخی از متدهای مهم این شی می‌پردازیم:
  

 * ``Match.group([group1, ...])`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.group>`__]

  این متد از شی ``Match``، گروه (های) تطبیق داده شده بر اساس الگو مورد نظر را برمی‌گرداند. این متد می‌تواند یک یا چند آرگومان عددی دریافت کند که معرف اندیس گروه مورد نظر می‌باشد. در حالت فراخوانی بدون آرگومان تمامی گروه‌های تطبیق داده شده به صورت یک مقدار رشته برگردانده می‌شود و در صورتی تنها یک مقدار به آن ارسال گردد، گروه تطبیق داده شده متناظر با آن اندیس (شمارش اندیس‌ها از یک است) در قالب یک شی رشته برگردانده می‌شود و در صورتی که بیش از یک اندیس به عنوان آرگومان ارسال گردد یک شی تاپل محتوی گروه‌های تطبیق داده شده برگردانده خواهد شد. چنانچه آرگومان ارسالی عددی منفی باشد یا اندیسی بالاتر از تعداد گروه‌های تطبیق داده شده باشد، یک استثنا ``IndexError`` رخ خواهد داد::

    >>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist") 
    >>> m.group()        # The entire match
    'Isaac Newton'
    >>> m.group(0)       # The entire match
    'Isaac Newton'
    >>> m.group(1)       # The first parenthesized subgroup.
    'Isaac'
    >>> m.group(2)       # The second parenthesized subgroup.
    'Newton'
    >>> m.group(1, 2)    # Multiple arguments give us a tuple.
    ('Isaac', 'Newton')

    >>> m.group(3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    IndexError: no such group
    
  در صورتی که الگو مورد نظر شامل هیچ گروهبندی نباشد، فراخوانی بدون آرگومان (یا ارسال آرگومان صفر) این متد، تمام متن تطبیق داده شده را برمی‌گرداند::
  
  
    >>> pattern = re.compile('Py...n')
    >>> match = pattern.search('Python is great')
    >>> match.group()
    'Python'
    
    >>> match.group(0)
    'Python'
    
    >>> match.group(1)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    IndexError: no such group
    >>> 




  * ``Match.groups(default=None)`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.groups>`__]

  این متد تمام گروه‌های تطبیق داده شده بر اساس الگو مورد نظر را در قالب یک شی تاپل برمی‌گرداند. این متد می‌تواند یک آرگومان بپذیرد که معرف مقدار پیش‌فرض برای جایگذاری گروه‌هایی است که در رشته ورودی تطبیق داده نشده‌اند، در حالت عادی (بدون ارسال آرگومان) این مقدار برابر با ``None`` است::

    >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")
    >>> m.groups()
    ('24', '1632')

  ::

       >>> m = re.match(r"(\d+)\.?(\d+)?", "24")
       >>> m.groups()      # Second group defaults to None.
       ('24', None)
       >>> m.groups('0')   # Now, the second group defaults to '0'.
       ('24', '0')
       
       
  ::
  
      >>> pattern = re.compile('Py...n')  # The pattern is without grouping
      >>> match = pattern.search('Python is great')
      >>> match.groups()
      ()


  * ``Match.start([group])`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.start>`__]    ``Match.end([group])`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.end>`__]

  متن رشته خروجی (تطبیق یافته بر اساس الگو مورد نظر) را در نظر بگیرید، متد ``start`` اندیس شروع این متن از رشته ورودی و متد ``end``  اندیس نقطه پایان را برمی‌گرداند. این دو متد می‌توانند یک آرگومان اختیاری نیز دریافت کنند که معرف اندیس یک گروه مشخص در الگو می‌باشد، با ارسال این آرگومان نتایج بر اساس تکه متن تطبیق داده شده با آن گروه برگردانده خواهد شد::

    >>> email = "tony@tiremove_thisger.net"
    >>> m = re.search("remove_this", email)
    >>> m.start()
    7
    >>> m.end()
    18
    >>> email[m.start() : m.end()]
    'remove_this'
    >>> email[:m.start()] + email[m.end():]
    'tony@tiger.net'

  ::

       >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")

       >>> m.start()
       0
       >>> m.end()
       7

       >>> m.start(1)
       0
       >>> m.end(1)
       2

       >>> m.start(2)
       3
       >>> m.end(2)
       7
       >>> 


  * ``Match.span([group])`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.span>`__]

  این متد یک شی تاپل دوتایی از خروجی دو متد ``start``  و ``end``  را بر می‌گرداند و همانند آنها نیز یک آرگومان اختیاری دارد - نمونه خروجی: ``(m.start(group), m.end(group))``::

    >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")
    >>> m.span()
    (0, 7)
    >>> m.span(1)
    (0, 2)
    >>> m.span(2)
    (3, 7)
    >>> m.span(3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    IndexError: no such group

  * ``Match.re`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.re>`__]    ``Match.string`` [`اسناد پایتون <https://docs.python.org/3/library/re.html#re.Match.string>`__]

  این دو متغیر به ترتیب حاوی  شی RegEx الگو و متن مورد نظر جهت انجام عملیات تطابق خواهند بود::

    >>> email = "tony@tiremove_thisger.net"
    >>> m = re.search("remove_this", email)

    >>> m.re
    re.compile('remove_this')

    >>> m.string
    'tony@tiremove_thisger.net'
    >>> m.string[m.start() : m.end()]
    'remove_this'

  ::

       >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")

       >>> m.re
       re.compile('(\\d+)\\.(\\d+)')

       >>> m.string
       '24.1632'






|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <http://www.coderz.ir/python-tutorial-re-regex/>`_



