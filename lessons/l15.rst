.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش ماژول re در پایتون، عبارات باقاعده در پایتون، Regular expression در پایتون، regex در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, تابع, کتابخانه, پایتون, re


درس ۱۵: کتابخانه استاندارد پایتون: Regular expression در پایتون - re
============================================================================

**عبارات با قاعده** (**Regular expression**) یا به اختصار **RegEx**، رشته‌ای حاوی کاراکترهایی خاص و با معنی است که در عملیات‌هایی مانند یافتن (find)، جاگذاری (repleace) و اعتبارسنجی (validation) به شدت کاربرد پیدا کرده است. در واقع با استفاده از RegEx می‌توان یک الگو (pattern) برای جستجو در متن یا تطابق آن ایجاد کرد.  [`ویکی‌پدیا <https://en.wikipedia.org/wiki/Regular_expression>`__]

در این درس به شرح قواعد موجود در RegEx و همچنین ماژول ``re`` از کتابخانه استاندارد پایتون خواهیم پرداخت [`اسناد پایتون <https://docs.python.org/3/library/re.html>`__]. ماژول ``re`` یک مجموعه ابزار برای کار با RegEx در پایتون را فراهم آورده است که می‌توان آن را موتور تحلیل RegEx در پایتون دانست.





:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----

عبارات باقاعده
-----------------

قواعد «عبارات باقاعده» شامل استفاده و چیدمان تعدادی کاراکتر خاص می‌شود که در مجموع معنی یا الگویی را به وجود می‌آورند!. در ادامه به بررسی این کاراکترها می‌پردازیم.


کاراکترهای تطابق (Matching Characters)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

در عمل تطبیق (Match) با RegEx، اکثر حروف و کاراکتر‌ها معرف خود همان کاراکتر است. برای مثال کاراکتر ``a`` معرف ``a`` است و  کلمه ``test`` نیز با همان کلمه ``test`` تطابق یا همخوانی پیدا می‌کند. 


با این حال برخی از کاراکترها هستند که به جای همخوانی با خود، مفهوم دیگری را می‌رسانند که از آن‌ها با عنوان ``metacharacters`` (متاکاراکترها) یاد می‌شود [`اسناد پایتون <https://docs.python.org/3/howto/regex.html#matching-characters>`__] و عبارتند از::

  . ^ $ * + ? [] {} | () \


* Dot ``.``

  به معنی «هر کاراکتری» می‌باشد. یعنی وجود ``.`` در یک الگو (Pattern) باعث انجام عمل تطابق یا همخوانی با هر کاراکتری خواهد شد (به جز کاراکتر newline یا ``n\``).

  .. tip::
      به صورت پیش‌فرض ``.`` در الگوی RegEx کاراکتر newline را شامل نمی‌شود ولی در زبان برنامه‌نویسی پایتون می‌توان با نشانه‌گذاری ``re.DOTALL`` کاری کرد که کاراکتر newline را نیز شامل شود. *نمونه کد مربوط به این بحث در بخش بعدی بررسی خواهد شد.*

  به عنوان نمونه الگوی ``...`` هر سه کاراکتر متوالی را در بر می‌گیرد::

    ...


  ::

    'ab'          => no matche
    'abc1234'     => 2 matches ('abc', '123')
    '01267'       => 1 matche  ('012')
    'python'      => 2 matches ('pyt', 'hon')
    '2 0 85  ad'  => 3 matches ('2 0', ' 85', '  a')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/7>`__]



* Caret ``^``

  در یک کاربرد در سمت چپ یک الگو قرار می‌گیرد و تعین کننده الزام شروع با آن الگو (Pattern) می‌باشد (*کاربرد دیگر آن در ادامه ذکر خواهد شد*).


  ::

    ^a


  ::

    'a'        => 1 matche ('a')
    'abc'      => 1 matche ('a')
    'bac'      => no matche ('a' is not in the start)

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/8>`__]


  ::

    ^ab

  ::

    'abc'           => 1 matche ('ab')
    'acb'           => no matche (starts with 'a' but not followed by 'b')
    'ab123 ab456'   => 1 matche ('ab' from ab123)


  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/10>`__]


* Dollar ``$``

  تعین کننده نقطه پایان تطابق الگو می‌باشد.


  ::

     a$
           a        => Matched
           formula  => Matched
           cab      => NO Match ('a' is not in the end)


  ::

     ^s...d$
   
  به عنوان مثالی دیگر، الگوی بالا معرف هر کلمه پنج کاراکتری است که با کاراکتر ``s`` شروع و با کاراکتر ``d`` پایان می‌پذیرد.


* Star ``*``

  معرف **هیچ** یا **هر تعداد** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma*n
           mn       => Matched
           man      => Matched
           maaan    => Matched
           main     => NO Match ('a' is not followed by 'n')
           woman    => Matched


* Plus ``+``

  معرف **یک** یا **هر تعداد** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma+n
           mn       => NO Match (no 'a' character)
           man      => Matched
           maaan    => Matched
           main     => NO Match ('a' is not followed by 'n')
           woman    => Matched



* Question Mark ``?``

  معرف **هیج** یا **یک** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma?n
           mn       => Matched
           man      => Matched
           maaan    => NO Match (more than one 'a' character)
           main     => NO Match ('a' is not followed by 'n')
           woman    => Matched



* Square brackets ``[ ]``

  از دو کاراکتر ``[`` و  ``]`` برای بیان یک دسته یا بازه از کاراکترها استفاده می‌شود که برای این منظور می‌توان تک تک کاراکترها را به صورت صریح نوشت یا با استفاده از کاراکتر ``-`` به سادگی یک بازه را تعیین نمود.


  ::

     [abc]

  برای نمونه، الگوی بالا با هر رشته‌ای که حاوی کاراکتر‌های   ``b`` ،``a`` یا ``c`` باشد تطابق خواهد داشت [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/2>`__].


  ::

     [abc]
           a          => 1 Matched
           ac         => 2 Matched
           python     => NO Match
           abc de ca  => 5 Matched


  همانطور که بیان شد، با استفاده از کاراکتر ``-`` هر دو بخش روبرو در نمونه کد پایین با یکدیگر معادل و برابر هستند::

     [0-9]       ==    [0123456789]
     [1-4]       ==    [1234]
     [a-e]       ==    [abcde]
     [1-5a-e]    ==    [12345abcde]
     [0-39]      ==    [01239]
     [a-eA-E]    ==    [abcdeABCDE]


  .. note::
      باید توجه داشت RegEx ذاتا CASE SENSITIVE است و کوچک یا بزرگ بودن حروف انگلیسی در آن **تاثیر دارد**. با این حال زبان‌های برنامه‌نویسی از جمله پایتون امکاناتی را برای غیرفعال ساختن این وضعیت فراهم می‌آورند که در ادامه بررسی خواهد شد.


  **کاربرد دوم کاراکتر  ^ (Caret)**

  اکنون زمان آن رسیده است تا با کاربرد دوم کاراکتر Caret ``^`` آشنا شویم: با قرار دادن این کاراکتر به عنوان عضو ابتدای یک ``[ ]`` می‌توان عملکرد یا مفهوم آن را برعکس‌ یا در واقع NOT کرد! برای نمونه الگوی ``[abc^]`` به معنی تطابق با هر کاراکتری است به جز ``b`` ،``a`` و ``c``. [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/3>`__]



* Braces ``{ }``

  با ساختاری مشابه ``{n,m}`` به کار می‌رود که در آن ``n`` و ``m`` به ترتیب بیان کننده حداقل و حداکثر تعداد تکرار الگوی سمت چپ خود می‌باشند.


  ::

     a{2,3}
           abc dat      => NO Match
           abc daat     => 1 Matched (at d'aa't)
           aabc daaat   => 2 Matched (at 'aa'bc and d'aaa't)
           aabc daaaat  => 2 Matched (at 'aa'bc and d'aaa'at)


  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/4>`__]

  ::

     [0-9]{2,4}
           1          => NO Match
           ab123cde   => 1 Matched (at ab'123'cde)
           12         => 1 Matched
           123456789  => 2 Matched (at '1234' and '5678')
           1 2 3 4    => NO Match


  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/5>`__]


  چنانچه از ``{ }`` با ساختاری مشابه ``{n}`` به کار برود، مفهوم تعداد تکرار دقیق (لازم) الگوی سمت چپ خود را می‌رساند.


  ::

     [0-9]{3}
           1          => NO Match
           ab123cde   => 1 Matched (at ab'123'cde)
           12         => NO Match
           123456789  => 3 Matched (at '123' and '456' and '789')
           1 2 3 4    => NO Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/13>`__]



* Pipe ``|``

  این کاراکتر مفهومی معادلی عملگر ``OR`` (یا) دارد که معرف تطابق با الگوی سمت راست **یا** سمت چپ خود می‌باشد.


  ::

     a|b
           cde      => NO Match
           ade      => 1 Matched (at 'a'de)
           acdbea   => 3 Matched (at 'a'cd'b'e'a')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/6>`__]



* Parentheses ``()``

  برای گروه‌بندی الگوها از پرانتز استفاده می‌شود یعنی می‌توان الگویی را با استفاده از یک یا چند زیرالگو (sub-patterns) ایجاد کرد.


  ::

     (a|b|c)xz

           ab xz      => NO Match
           abxz       => 1 Matched (at a'bxz')
           axz cabxz  => 2 Matched (at 'axz'bc ca'bxz')


  این الگو تمامی حروفی که شامل یکی از کاراکترهای ``a`` یا ``b`` یا ``c`` بوده و در ادامه ``xz`` باشد را تطبیق می‌دهد.

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/11>`__]




* Backslash ``\``

  از این کاراکتر برای بی‌اثر کردن مفهوم هر یک از metacharacters در الگو استفاده می‌شود. برای نمونه قرار گرفتن  ``*\`` در یک الگو، تنها خود کاراکتر ``*`` را تطبیق می‌دهد و به عبارتی دیگر کاراکتر ``*`` در این جا مفهوم الگویی خود (تکرار الگو سمت چپ) را از دست داده است.


  ::

     [0-9]\.[0-9]{2}

           3        => NO Match
           3.55     => 1 Matched (at '3.55')
           5.2      => NO Match
           7.37520  => 1 Matched (at '7.37')
           506.035  => 1 Matched (at '6.03')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/12>`__]



توالی‌های ویژه (Special sequences)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

در بحث عبارات باقاعده هنگامی که کاراکتر ``\`` به همراه یک کاراکتر مشخص (به شرح زیر) آورده شود، Special sequence خوانده می‌شود. Special sequences برای سهولت در نوشتن الگوها کاربرد دارند که برخی از پر کاربردترین آن‌ها عبارتند از::

  \A \b \B \d \D \s \S \w \W




* ``A\``

  برای تعین شروع یک متن به کار می‌رود. برای نمونه، الگوی ``AThe\`` تمام رشته‌هایی که با ``The`` شروع شوند را تطبیق می‌دهد (یادآوری: در بحث RegEx، کوچک یا بزرگ بودن حروف دارای اهمیت است).

  ::

     \AThe

           The Rain        => Match
           In The Rain     => NO Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/14>`__]



* ``b\``

  بر حسب موقعیت قرار گرفتن، شروع یا پایان یک **کلمه** را مشخص می‌کند. 

  ::

     \bunder

           understand        => Match
           underworld        => Match
           Underworld        => NO Match
           TheUnderworld     => NO Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/16>`__]



  ::

     ing\b

           Driving        => Match
           Spring         => Match
           spring_day     => NO Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/17>`__]


* ``B\``

  برعکس ``b\``، بر حسب موقعیت قرار گرفتن شروع یا پایان **نیافتن** یک **کلمه** را مشخص می‌کند. یعنی کلماتی را تطبیق می‌دهد که با کاراکتر یا کارکترهایی مشخصی شروع یا پایان نیافته باشند.

  ::

     \Bunder

           understand        => NO Match
           underworld        => NO Match
           Underworld        => NO Match
           Thunderbird       => Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/18>`__]


  ::

     ball\B

           Football        => NO Match
           Footballist     => Match

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/19>`__]


* ``d\``

  معادل ``[9-0]``

  ::

     \d{3,5}

           1                     => NO Match
           123                   => 1 Matched (at '123')
           123456                => 1 Matched (at '12345')
           1237 Main Street,     => 1 Matched (at '1237')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/20>`__]



* ``D\``

  برعکس ``d\`` - معادل ``[9-0^]``، یعنی تمامی کاراکترهای غیر عددی را تطبیق می‌دهد.

  ::

     \D{3,5}

           1                     => NO Match
           123                   => NO Match
           123456                => NO Match
           1237 Main Street,     => 3 Matched (at ' Main', ' Stre', 'et,')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/21>`__]


* ``s\``

  معادل ``[t\n\r\f\v\ ]``، به معنی عمل تطبیق با کاراکتر فضای خالی است.

  ::

     \s

           1237 Main Street,     => 2 Matched (2 spaces)

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/23>`__]




  البته باید توجه داشته که منظور از کاراکترهای ``t \n \r \f \v\`` همان Escape character هستند [`ویکی‌پدیا <https://en.wikipedia.org/wiki/Escape_character>`__].

  ::

      \n ---> new line
      \r ---> carriage return
      \t ---> tab
      \v ---> vertical tab
      \f ---> form feed






* ``S\``

  برعکس ``s\`` - معادل ``[t\n\r\f\v\ ^]``، به معنی عمل تطبیق با هر کاراکتری غیر از فضای خالی است.

  ::

     \S{2,5}

           1237 Main Street,     => 4 Matched (at '1237', 'Main', 'Stree', 't,')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/24>`__]


* ``w\``

  معادل ``[_a-zA-Z0-9]``، به معنی عمل تطبیق با کاراکترهای الفبایی و عددی (زبان انگلیسی) به همراه کاراکتر ``_`` یا underscore.

  ::

     \w{2,5}

           1237 Main Street,     => 3 Matched (at '1237', 'Main', 'Stree')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/25>`__]


* ``W\``

  برعکس ``w\`` - معادل ``[_a-zA-Z0-9^]``، به معنی عمل تطبیق با کاراکتری به غیر از کاراکترهای الفبایی و عددی (زبان انگلیسی) به همراه کاراکتر ``_`` یا underscore.

  ::

     \W

           1237 Main Street,     => 3 Matched (2 spaces and ',')

  [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/26>`__]


ماژول re پایتون
-----------------




|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <http://www.coderz.ir/python-tutorial-re-regex/>`_



