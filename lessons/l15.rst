.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش ماژول re در پایتون، عبارات باقاعده در پایتون، Regular expression در پایتون، regex در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, تابع, کتابخانه, پایتون, re


درس ۱۵: کتابخانه استاندارد پایتون: Regular expression در پایتون - re
============================================================================

**عبارات با قاعده** (**Regular expression**) یا به اختصار **RegEx**، رشته‌ای حاوی کاراکترهایی خاص و با معنی است که در عملیات‌هایی مانند یافتن (find)، جاگذاری (repleace) و اعتبارسنجی (validation) به شدت کاربرد پیدا کرده است. در واقع با استفاده از RegEx می‌توان یک الگو (pattern) برای جستجو در متن یا تطابق آن ایجاد کرد.  [`ویکی‌پدیا <https://en.wikipedia.org/wiki/Regular_expression>`__]

در این درس به شرح قواعد موجود در RegEx و همچنین ماژول ``re`` از کتابخانه استاندارد پایتون خواهیم پرداخت [`اسناد پایتون <https://docs.python.org/3/library/re.html>`__]. ماژول ``re`` یک مجموعه ابزار برای کار با RegEx در پایتون را فراهم آورده است که می‌توان آن را موتور تحلیل RegEx در پایتون دانست.





:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----

عبارات باقاعده
-----------------

قواعد «عبارات باقاعده» شامل استفاده و چیدمان تعدادی کاراکتر خاص می‌شود که در مجموع معنی یا الگویی را به وجود می‌آورند!. در ادامه به بررسی این کاراکترها می‌پردازیم.


کاراکترهای تطابق (Matching Characters)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

در عمل تطبیق (Match) با RegEx، اکثر حروف و کاراکتر‌ها معرف خود همان کاراکتر است. برای مثال کاراکتر ``a`` معرف ``a`` است و  کلمه ``test`` نیز با همان کلمه ``test`` تطابق یا همخوانی پیدا می‌کند. 


با این حال برخی از کاراکترها هستند که به جای همخوانی با خود، مفهوم یا الگویی دیگر را می‌رساند که عبارتند از::

  . ^ $ * + ? [] {} \ | () 


* Period ``.``

  به معنی «هر کاراکتری» می‌باشد و با هر کاراکتری تطابق یا همخوانی خواهد داشت (به جز کاراکتر newline یا ``n\``).



* Caret ``^``

  در یک کاربرد تعین کننده نقطه آغاز تطابق و شروع الگو می‌باشد (کاربرد دیگر آن در ادامه ذکر می‌گردد).


  ::

     ^a
           a        => Matched
           abc      => Matched
           bac      => NO Matched ('a' is not in the start)

  ::

     ^ab
           abc      => Matched
           acb      => NO Matched (starts with 'a' but not followed by 'b')


* Dollar ``$``

  تعین کننده نقطه پایان تطابق الگو می‌باشد.


  ::

     a$
           a        => Matched
           formula  => Matched
           cab      => NO Matched ('a' is not in the end)


  ::

     ^s...d$
   
  به عنوان مثالی دیگر، الگوی بالا معرف هر کلمه پنج کاراکتری است که با کاراکتر ``s`` شروع و با کاراکتر ``d`` پایان می‌پذیرد.


* Star ``*``

  معرف **هیچ** یا **هر تعداد** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma*n
           mn       => Matched
           man      => Matched
           maaan    => Matched
           main     => NO Matched ('a' is not followed by 'n')
           woman    => Matched


* Plus ``+``

  معرف **یک** یا **هر تعداد** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma+n
           mn       => NO Matched (no 'a' character)
           man      => Matched
           maaan    => Matched
           main     => NO Matched ('a' is not followed by 'n')
           woman    => Matched



* Question Mark ``?``

  معرف **هیج** یا **یک** تکرار الگوی سمت چپ خود می‌باشد.


  ::

     ma?n
           mn       => Matched
           man      => Matched
           maaan    => NO Matched (more than one 'a' character)
           main     => NO Matched ('a' is not followed by 'n')
           woman    => Matched



* Square brackets ``[ ]``

  از دو کاراکتر ``[`` و  ``]`` برای بیان یک دسته یا بازه از کاراکترها استفاده می‌شود که برای این منظور می‌توان تک تک کاراکترها را به صورت صریح نوشت یا با استفاده از کاراکتر ``-`` به سادگی یک بازه را تعیین نمود.


  ::

     [abc]

  برای نمونه، الگوی بالا با هر رشته‌ای که حاوی کاراکتر‌های   ``b`` ،``a`` یا ``c`` باشد تطابق خواهد داشت [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/2>`__].


  ::

     [abc]
           a          => 1 Matched
           ac         => 2 Matched
           python     => NO Matched
           abc de ca  => 5 Matched


  همانطور که بیان شد، با استفاده از کاراکتر ``-`` هر دو بخش روبرو در نمونه کد پایین با یکدیگر معادل و برابر هستند::

     [0-9]       ==    [0123456789]
     [1-4]       ==    [1234]
     [a-e]       ==    [abcde]
     [1-5a-e]    ==    [12345abcde]
     [0-39]      ==    [01239]
     [a-eA-E]    ==    [abcdeABCDE]


  .. note::
      باید توجه داشت RegEx ذاتا CASE SENSITIVE است و کوچک یا بزرگ بودن حروف انگلیسی در آن تاثیر دارد. با این حال زبان‌های برنامه‌نویسی از جمله پایتون امکاناتی را برای غیرفعال ساختن این وضعیت فراهم می‌آورند که در ادامه بررسی خواهد شد.


  **کاربرد دوم کاراکتر  ^ (Caret)**

  اکنون زمان آن رسیده است تا با کاربرد دوم کاراکتر Caret ``^`` آشنا شویم: با قرار دادن این کاراکتر به عنوان عضو ابتدای یک ``[ ]`` می‌توان عملکرد یا مفهوم آن را برعکس‌ یا در واقع NOT کرد! برای نمونه الگوی ``[abc^]`` به معنی تطابق با هر کاراکتری است به جز ``b`` ،``a`` و ``c``. [`regex101@ تست آنلاین <https://regex101.com/r/IIc4Fh/3>`__]



* Braces ``{ }``

  با ساختاری مشابه ``{n,m}`` به کار می‌رود که در آن ``n`` و ``m`` به ترتیب بیان کننده حداقل و حداکثر تعداد تکرار الگوی سمت چپ خود می‌باشند.





|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <http://www.coderz.ir/python-tutorial-re-regex/>`_



