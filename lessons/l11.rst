.. role:: emoji-size

.. meta::
   :description: کتاب آنلاین و آزاد آموزش زبان برنامه‌نویسی پایتون به فارسی - درس یازدهم کتابخانه استاندارد
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, انواع شی, انواع داده, پایتون


درس ۱۱: کتابخانه استاندارد (بخش ۱)
====================================

کتابخانه استاندارد پایتون مجموعه‌ وسیعی از امکانات آماده است که با نصب پایتون در اختیار قرار می‌گیرد. فهرست کامل این امکانات را می‌توانید از نشانی‌های `(پایتون 2x) <https://docs.python.org/2/library/>`_  و `(پایتون 3x) <https://docs.python.org/3/library/>`_ مشاهده نمایید. لازم به یادآوری است که بخشی بزرگی از قدرت پایتون به دلیل وجود کتابخانه‌های فراوان و قدرتمند آن است که تعداد زیادی از آن‌ها خارج کتابخانه استاندارد پایتون و درون جامعه کاربری آن در حال توسعه هستند که فهرست تقریبا کاملی از آن‌ها نیز توسط `PyPI <https://pypi.python.org/pypi>`_ قابل جستجو و دریافت هستند.

این درس به عنوان آخرین درس از سطح مقدماتی کتاب به بررسی بخشی از امکان‌های کاربردی این کتابخانه اختصاص یافته است که البته ممکن است در طول درس‌های گذشته از آن‌ها استفاده کرده باشیم!.






:emoji-size:`✔` سطح: مقدماتی

----


math
------
این ماژول حاوی ثابت‌ها (Constants) و تابع‌های ریاضی است [`اسناد پایتون <https://docs.python.org/3/library/math.html>`__] که برخی از آن‌ها به شرح پایین است:

* ``math.pi``: ثابتی حاوی عدد π (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Pi>`__) است [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.pi>`__]::

    >>> import math

    >>> math.pi
    3.141592653589793
    >>> 

* ``math.e``: ثابتی حاوی عدد e (`ویکی‌پدیا <https://en.wikipedia.org/wiki/E_(mathematical_constant)>`__) است [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.e>`__]::

    >>> import math

    >>> math.e
    2.718281828459045
    >>> 

* ``math.inf``: از نسخه 3.5 به بعد - ثابتی حاوی مقدار مثبت بی‌نهایت (Positive infinity) است که این مقدار برابر با خروجی تابع ``('float('inf`` می‌باشد. ``math.inf-`` نیز برابر منفی بی‌نهایت است [`اسناد پایتون <https://docs.python.org/3/library/math.html#math.inf>`__].

  برای بررسی inf بودن (مثبت یا منفی) از تابع ``(math.isinf(x`` [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.isinf>`__] استفاده می‌شود::

      >>> import math

      >>> a = math.inf
      >>> b = 10
      >>> a > b
      True

      >>> math.isinf(a)
      True
      >>> math.isinf(b)
      False
      >>> 

* ``math.nan``: از نسخه 3.5 به بعد - ثابتی حاوی مقدار «تعریف نشده» یا NaN - اختصار Not a Number (`ویکی‌پدیا <https://en.wikipedia.org/wiki/NaN>`__) - می‌باشد که این مقدار برابر با خروجی تابع ``('float('nan`` است [`اسناد پایتون <https://docs.python.org/3/library/math.html#math.nan>`__].

  برای بررسی nan بودن از تابع ``(math.isnan(x`` [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.isnan>`__] استفاده می‌شود::

      >>> import math

      >>> a = math.nan
      >>> a
      nan

      >>> math.isnan(a)
      True
      >>>


* ``(math.ceil(x``: کوچکترین عدد صحیحی که بزرگتر یا مساوی با عدد ``x`` باشد را برمی‌گرداند [`اسناد پایتون <https://docs.python.org/3/library/math.html#math.ceil>`__]::

    >>> import math

    >>> math.ceil(4)
    4
    >>> math.ceil(-4.17)
    -4
    >>> math.ceil(4.17)
    5
    >>> 

* ``(math.floor(x``: بزرگترین عدد صحیحی که کوچکتر یا مساوی با عدد ``x`` باشد را برمی‌گرداند [`اسناد پایتون <https://docs.python.org/3/library/math.html#math.floor>`__]::

    >>> import math

    >>> math.floor(4)
    4
    >>> math.floor(-4.17)
    -5
    >>> math.floor(4.17)
    4
    >>> 

* ``(math.fabs(x``: همانند تابع آماده ``()abs`` [`اسناد پایتون <http://docs.python.org/3/library/functions.html#abs>`__] مقدار قدر مطلق (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Absolute_value>`__) عدد ``x`` را برمی‌گرداند [`اسناد پایتون <https://docs.python.org/3/library/math.html#math.fabs>`__]::

    >>> import math

    >>> math.fabs(-4.17)
    4.17
    >>> math.fabs(-4)
    4.0
    >>> math.fabs(4)
    4.0
    >>> 

* ``(math.factorial(x``: مقدار فاکتوریل (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Factorial>`__) عدد x را برمی‌گرداند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.factorial>`__]::

    >>> import math

    >>> math.factorial(5)
    120
    >>>

* ``(math.exp(x``: حاصل ``e**x`` (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Exponential_function>`__) را برمی‌گرداند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.exp>`__]::

    >>> import math

    >>> math.exp(3)
    20.085536923187668
    >>> 

* ``(math.log(x[, base]``: حاصل لگاریتم (Logarithm) عدد x در پایه base را برمی‌گرداند؛ آرگومان base اختیاری است و چنانچه ذکر نگردد به صورت پیش‌فرض حاصل لگاریتم عدد x در پایه عدد e یا همان لگاریتم طبیعی (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Natural_logarithm>`__) برگردانده می‌شود [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.log>`__]::

    >>> import math

    >>> math.log(math.e)     # ln e == 1
    1.0
    >>> math.log(1)          # ln 1 == 0
    0.0
    >>>

  ::
      
      >>> math.log(8, 2)       # 2**3 == 8
      3.0
      >>> math.log(100, 10)    # 10**2 == 100
      2.0
      >>> math.log(81, 3)      # 3**4 == 81
      4.0
      >>> math.log(2, 10)
      0.30102999566398114
      >>> 

  برای سادگی استفاده در محاسبه‌های ریاضی دو تابع ``(log10(x`` [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.log10>`__] - محاسبه لگاریتم عدد x در پایه عدد 10 - و ``(log2(x`` [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.log2>`__] - محاسبه لگاریتم عدد x در پایه عدد 2؛ که از نسخه 3.3 به بعد اضافه شده است - نیز در دسترس هستند::

      >>> math.log10(100)
      2.0
      >>> math.log2(8)
      3.0
      >>> 


* ``(math.sqrt(x``:  ریشه دوم (Square root) یا همان جذر (`ویکی‌پدیا <https://en.wikipedia.org/wiki/Square_root>`__)‌ عدد x را برمی‌گرداند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.sqrt>`__]::


    >>> import math

    >>> math.sqrt(4)
    2.0
    >>>

* ``(math.pow(x, y``: عدد x را به توان عدد y می‌رساند و حاصل را برمی‌گرداند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.pow>`__]::

    >>> import math

    >>> math.pow(3, 2)
    9.0

  این تابع هر دو آرگومان خود را به نوع float تبدیل می‌کند؛ چنانچه می‌خواهید با اعداد صحیح کار کنید، از عملگر ``**`` یا تابع آماده ``()pow`` [`اسناد پایتون <http://docs.python.org/3/library/functions.html#pow>`__] استفاده نمایید::

    >>> 3**2
    9
    >>> pow(3, 2)
    9


* توابع مثلثاتی (Trigonometric functions) [`اسناد پایتون <http://docs.python.org/3/library/math.html#trigonometric-functions>`__]:  ``(cos(x`` و ``(sin(x`` و ``(tan(x`` و ``(acos(x`` و ``(asin(x`` و ``(atan(x`` که در تمام آن‌ها زاویه x بر حسب **رادیان (Radian)** است::

    >>> import math

    >>> math.cos(0)
    1.0
    >>> math.sin(0)
    0.0
    >>> math.tan(0)
    0.0
    >>> 

* ``(math.degrees(x``: زاویه x را از رادیان به **درجه** تبدیل می‌کند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.degrees>`__]::

    >>> import math

    >>> math.degrees(0)
    0.0

* ``(math.radians(x``: زاویه x را از درجه به **رادیان** تبدیل می‌کند [`اسناد پایتون <http://docs.python.org/3/library/math.html#math.radians>`__]::

    >>> import math

    >>> math.degrees(0)
    0.0
    >>> math.radians(30)
    0.5235987755982988

  ::

      >>> math.sin(math.radians(90))
      1.0

* توابع هذلولی (Hyperbolic functions) [`اسناد پایتون <http://docs.python.org/3/library/math.html#hyperbolic-function>`__]:  ``(cosh(x`` و ``(sinh(x`` و ``(tanh(x`` و ``(acosh(x`` و ``(asinh(x`` و ``(atanh(x``.


os
-----
این ماژول امکان استفاده از برخی قابلیت‌های وابسته به سیستم عامل را فراهم می‌آورد؛ مانند گرفتن مسیر دایرکتوری برنامه [`اسناد پایتون <http://docs.python.org/3/library/os.html>`_]. برخی از تابع‌های موجود در این ماژول به شرح پایین است:

* ``os.environ``: یک شی از نوع نگاشت - مانند نوع دیکشنری [به درس هشتم رجوع شود] - است که حاوی متغیرهای محیطی سیستم عامل می‌باشد [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.environ>`__]

  باید توجه داشت که مقدار این دستور متناسب با لحظه‌ای از سیستم عامل است که ماژول ``os`` به اسکریپت import شده است و شامل متغیرهایی که پس از این لحظه ایجاد شده باشند نمی‌شود.

  ::


    >>> # Python 3.x, GNU/Linux

    >>> import os
    >>> os.environ
    environ({'LOGNAME': 'saeid', 'PWD': '/home/saeid', '_': '/usr/bin/python3', 'LANG': 'en_US.UTF-8', 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin', 'ZSH': '/home/saeid/.oh-my-zsh'})
    >>> 

  ::

      >>> os.environ['PATH']
      '/usr/local/sbin:/usr/local/bin:/usr/bin'

      >>> os.environ['LANG']
      'en_US.UTF-8'


* ``()os.getcwd``: مسیر دایرکتوری جاری (Current Working Directory)‌ را برمی‌گرداند. خروجی این تابع برابر با دستور ``pwd`` در خط فرمان گنولینوکس یا ``%echo %CD`` در خط فرمان ویندوز می‌باشد. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.getcwd>`__]::

    # Python 3.x, GNU/Linux

    ~ pwd
    /home/saeid

 ::

    >>> python3 -q 
    >>> import os
    >>> os.getcwd()
    '/home/saeid'
    >>>


* ``(os.chdir(path``: مسیر دایرکتوری جاری را به مسیر آرگومان دریافتی path تغییر می‌دهد. عملکرد این تابع برابر با دستور ``cd`` در خط فرمان‌های گنولینوکس و ویندوز است. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.chdir>`__]::

    >>> import os

    >>> os.getcwd()
    '/home/saeid'

    >>> os.chdir('/etc')

    >>> os.getcwd()
    '/etc'

* ``(os.listdir(path``: یک شی لیست که شامل محتویات درون دایرکتوری path است را برمی‌گرداند. چنانچه آرگومان path ارسال نشود به صورت پیش‌فرض مسیر دایرکتوری جاری در نظر گرفته می‌شود. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.listdir>`__] ::

    >>> import os
    >>> os.listdir('/home/saeid/Pictures')
    ['scan0001.jpg', 'smplayer_screenshots', 'GNU.png', 'Wallpapers']


* ``(os.mkdir(path``: یک دایرکتوری که نام کامل آن توسط آرگومان path تعیین شده است را ایجاد می‌کند. در صورتی که این دایرکتوری از قبل موجود باشد یک استثنا ``FileExistsError`` رخ می‌دهد. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.mkdir>`__]::

    >>> import os
    >>> os.mkdir('dir1')

  در نمونه کد بالا از آنجا که مسیر دایرکتوری ذکر نشده است؛ دایرکتوری dir1 به صورت پبش فرض در مسیر دایرکتوری جاری (که در اینجا: ``/home/saeid/`` است) ایجاد می‌گردد؛ همین امر باعث بروز استثنا با اجرای دستور پایین می‌شود::

      >>> os.mkdir('/home/saeid/dir1')
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
      FileExistsError: [Errno 17] File exists: '/home/saeid/dir1'



  ::

    >>> os.mkdir('/home/saeid/Documents/dir2')

  *نمونه کد بالا موجب ایجاد دایرکتوری dir2 درون مسیر دایرکتوری Documents می‌شود.*

  مسیر دایرکتوری می‌بایست به صورت صحیح وارد شود؛ در نمونه کد پایین نیز به همین دلیل که دایرکتوری dir3 وجود ندارد، استثنایی رخ داده است.

  ::

      >>> os.mkdir('/home/saeid/Documents/dir3/dir4')
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
      FileNotFoundError: [Errno 2] No such file or directory: '/home/saeid/Documents/dir3/dir4'


* ``(os.makedirs(path``: همانند ``(os.mkdir(path`` است ولی با این تفاوت که تمامی دایرکتوری‌های میانی مورد نیاز را هم ایجاد می‌کند. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.makedirs>`__]

  *در نمونه کد پایین برای ایجاد دایرکتوری dir5 دایرکتوری‌های dir3 و dir4 - که البته وجود ندارند - نیز ایجاد می‌گردند.*

  ::

    >>> import os
    >>> os.makedirs('/home/saeid/Documents/dir3/dir4/dir5')

* ``(os.rmdir(path``: دایرکتوری مشخص شده توسط آرگومان path را حذف می‌کند. این دایرکتوری می‌بایست خالی باشد در غیر این صورت یک استثنا ``OSError`` رخ می‌دهد. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.rmdir>`__]


  همچنین برای حذف کامل یک دایرکتوری به همراه تمام محتویات آن می‌توانید از تابع ``(rmtree(path`` درون ماژول ``shutil`` [`اسناد پایتون <http://docs.python.org/3/library/shutil.html#shutil.rmtree>`__] استفاده نمایید::

    >>> import shutil
    >>> shutil.rmtree("/home/saeid/Documents/dir1")


* ``(os.removedirs(path``: همانند ``(os.rmdir(path`` است ولی با این تفاوت که عملکردی بازگشتی دارد و تا زمانی که خطایی رخ نداده دایرکتوری‌های مشخص شده در آرگومان path را یکی یکی حذف می‌کند. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.removedirs>`__] ::

    >>> import os
    >>> os.removedirs('/home/dir1/dir2/dir3')

  در نمونه کد بالا ابتدا دایرکتوری dir3 (با مسیر ``'home/dir1/dir2/dir3/'``) حذف می‌شود - البته اگر خالی باشد - و بعد از آن برای حذف دایرکتوری dir2 (با مسیر ``'home/dir1/dir2/'``) تلاش می‌شود که اگر آن‌هم خالی باشد و حذف گردد، روند حذف به همین شکل برای باقی مسیر ادامه می‌یابد.

* ``(os.rename(src, dst``: این تابع برای تغییر نام یک فایل یا دایرکتوری کاربرد دارد. آرگومان ``src`` نام اصلی و آرگومان ``dst`` نیز نام جدید برای فایل یا دایرکتوری مورد نظر می‌باشند [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.rename>`__]::

    >>> import os
    >>> os.getcwd()
    '/home/saeid/Documents/dir'
    >>> os.listdir(os.getcwd())
    ['fontsdir', 'index.html', 'style.css']

    >>> os.rename("fontsdir", "_fonts")

    >>> os.listdir(os.getcwd())
    ['index.html', 'style.css', '_fonts']

  توجه داشته باشید چنانچه فایل یا دایرکتوری موردنظر در مسیری دیگری از مسیر دایرکتوری جاری باشد؛ لازم است نام به شکل کامل (همراه با مسیر) ذکر گردد. همچنین بدیهی است که تغییر مسیر در آرگومان ``dst`` موجب عمل انتقال (Move) می‌شود::

    >>> import os
    >>> os.getcwd()
    '/home/saeid/Documents/dir/dir1'
    >>> os.listdir(os.getcwd())
    ['index.html', 'style.css', '_fonts']

    >>> os.rename("_fonts", "/home/saeid/Documents/dir/dir2/_fonts")

    >>> os.listdir(os.getcwd())
    ['index.html', 'style.css']

    >>> os.chdir('/home/saeid/Documents/dir/dir2')
    >>> os.listdir(os.getcwd())
    ['_fonts']

  در گنولینوکس چنانچه بخواهیم نام فایلی به یک نام از پیش موجود تغییر داده شود؛‌ [در صورتی که کاربر نیز اجازه دسترسی (Permission) لازم را داشته باشد] یک عمل جایگزینی (Replace) صورت می‌گیرد، ولی برای چنین مواقعی در سیستم عامل ویندوز یک خطای ``OSError`` رخ خواهد داد. رویداد این ماجرا در هنگام تغییر نام یک دایرکتوری، باعث بروز خطای ``OSError`` در هر دو سیستم عامل می‌شود.


* ``(os.renames(old, new``: عملکردی مشابه با تابع ``()rename`` دارد با این تفاوت که اگر دایرکتورهای میانی از مسیر آرگومان ``new``، وجود نداشته باشند، آن‌ها را نیز ایجاد می‌کند [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.renames>`__]::

    >>> import os
    >>> os.getcwd()
    '/home/saeid/Documents/dir'
    >>> os.listdir(os.getcwd())
    ['index.html', 'style.css', '_fonts', 'js']

    >>> os.renames("style.css", "css/style.css")

    >>> os.listdir(os.getcwd())
    ['index.html', 'css', '_fonts', 'js']


* ``(os.walk(rootdirpath``: مسیر یک دایرکتوری را به عنوان دایرکتوری ریشه پیمایش می‌کند و مسیر هر دایرکتوری را که می‌بیند به همراه نام دایرکتوری‌ها و فایل‌های درون آن برمی‌گرداند. [`اسناد پایتون <http://docs.python.org/3/library/os.html#os.walk>`__]::

    dir1
    ├── dir2
    │   └── file21
    ├── file11
    └── file12

  ::

      >>> import os

      >>> tuple(os.walk('/home/saeid/Documents/dir1'))
      (('/home/saeid/Documents/dir1', ['dir2'], ['file12', 'file11']), ('/home/saeid/Documents/dir1/dir2', [], ['file21']))


  ::

      >>> import os

      >>> for root, dirs, files in os.walk('/home/saeid/Documents/dir1'):
      ...     print('Found directory: {}'.format(root))
      ...     for filename in files:
      ...         print('\t{}'.format(filename))
      ... 
      Found directory: /home/saeid/Documents/dir1
      	file12
      	file11
      Found directory: /home/saeid/Documents/dir1/dir2
      	file21
      >>> 

  جهت پیمایش دایرکتوری‌ها به صورت پیش‌فرض از بالا (دایرکتوری ریشه) به پایین است که می‌توان با ``False`` قرار دادن آرگومان اختیاری ``topdown`` آن را معکوس نمود::

    >>> for root, dirs, files in os.walk('/home/saeid/Documents/dir1', topdown=False):
    ...     print('Found directory: {}'.format(root))
    ...     for filename in files:
    ...         print('\t{}'.format(filename))
    ... 
    Found directory: /home/saeid/Documents/dir1/dir2
    	file21
    Found directory: /home/saeid/Documents/dir1
    	file12
    	file11
    >>> 





|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <http://coderz.ir/python-tutorial-standard-library-1/>`_


