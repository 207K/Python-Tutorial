.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش شی گرایی در پایتون، تعریف کلاس در پایتون، ایجاد شی در پایتون، OOP در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, تابع, کتابخانه, پایتون, شی گرایی در پایتون


درس ۱۷: شی گرایی (OOP) در پایتون: تعریف کلاس و ایجاد شی
============================================================================



پیش‌تر مفهوم شی‌گرایی شرح داده شده است (درس پنجم). در این درس می‌خواهیم به بررسی چگونگی پیاده‌سازی این مفهوم در زبان برنامه نویسی پایتون بپردازیم. پیش‌‌نیاز این درس مطالعه درس پنجم است.

توجه داشته باشید، هم اکنون پشتیبانی نسخه 2x پایتون به پایان رسیده است. بنابراین به منظور جلوگیری از پیچیدگی‌های غیر ضروری، تمام مطالب این درس بر مبنای پایتون 3x ارايه خواهد شد.



:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----

برنامه‌نویسی شی گرا (Object-Oriented Programming)
----------------------------------------------------------------------------------------------------

همان‌طور که پیش‌تر نیز گفته شده است، پایتون یک زبان برنامه‌نویسی چند الگویی (multi-paradigm) است و از الگوهای مختلفی از جمله شی گرایی پشتیبانی می‌کند. شی گرایی یک الگوی برنامه‌نویسی یا روشی برای طراحی کدهای برنامه است. 

در این شیوه کدهای برنامه در قالب موجودیت‌های کوچکی به نام **کلاس (Class)** به وجود می‌آیند. کلاس‌ها چیزی نیستند جز ابزاری که توسط آن می‌توان داده‌ها و عملیات مرتبط با یکدیگر را در یک دسته و جدا از سایر بخش‌های کد قرار داد. با کمک کلاس‌ها رفتار و عملکرد هر تکه از کد مشخص است و با سایر بخش‌های کد تداخل پیدا نمی‌کند. ایجاد یک کلاس به معنی ایجاد یک **نوع (Type)** جدید در برنامه می‌باشد که می‌توان چندین **شی (Object)** یا **نمونه (Instance)**  از آن نوع ایجاد کرد. یک برنامه شی‌گرا حاصل ارتباط و تعامل اشیا مختلف ایجاد شده در آن است.

مفاهیم زیادی از پایتون تا پیش از این درس مطرح شده است که باید بدانیم که تمام آن‌ها از پیاده‌سازی شی گرا پیروی می‌کردند. هر چیزی در پایتون یک شی است. انواع داده مانند اعداد، رشته، لیست یا دیکشنری همگی شی بودند - نمونه‌هایی که از کلاس‌های مربوط به خود ایجاد شده‌اند. حتی تعریف تابع نیز به معنی ایجاد یک شی از کلاس متناطر آن بوده است. اما حالا می‌خواهیم نوع یا کلاس‌های مورد نظر خودمان را در برنامه ایجاد و اشیایی از این کلاس‌ها نمونه سازی کنیم. در ادامه به شرح این روند خواهیم پرداخت.


تعریف کلاس (Class)
--------------------------------------------------------

در پایتون برای تعریف کلاس از کلمه کلیدی ``class`` استفاده می‌گردد؛ همانند الگو پایین::

    class ClassName:
        <statement-1>
        .
        .
        .
        <statement-N>

کلمه کلیدی تعریف کلاس - ``class`` - یک دستور اجراپذیر (Executable Statement) است. یک کلاس پیش از اجرای دستور خود هیچ تاثیری در برنامه ندارد. این شرایط سبب می‌شود که حتی بتوان یک کلاس را در میان بدنه دستور شرط (``if``) یا درون بدنه یک تابع تعریف کرد. [در پشت صحنه]: با اجرای دستور تعریف کلاس، یک شی از نوع type در حافظه ایجاد می‌گردد و از نام کلاس برای اشاره به آن شی استفاده می‌شود.

بعد از کلمه کلیدی ``class`` نام کلاس (به دلخواه کاربر) نوشته می‌شود. سطر نخست تعریف مانند تمام دستورات مرکب (Compound) که به صورت معمول در چند سطر نوشته می‌شوند و سرآیند دارند، به کاراکتر ``:`` ختم می‌شود. از سطر دوم با رعایت یکنواخت تورفتگی دستورات بدنه کلاس نوشته می‌شوند::
    
    >>> class MyClassName:
    ...     pass
    ... 
    >>> 
    
    >>> type(MyClassName)
    <class 'type'>


.. tip:: 
    پیشنهاد `PEP 8 <http://www.python.org/dev/peps/pep-0008>`__: برای نوشتن نام کلاس از شیوه CapitalizedWords استفاده شود.


.. tip:: 
  کلاس‌ها نیز همانند توابع حوزه (Scope) خود را دارند - درس دوازدهم. با  تعریف هر کلاس یک حوزه محلی جدید در برنامه پایتونی تعریف می‌گردد.

.. tip:: 
  یک کلاس، تعریف کننده صفات (ویژگی‌ها) - که به عنوان Attribute شناخته می‌شوند - و رفتار‌های (عملیات) - که به عنوان Method شناخته می‌شوند - اشیایی است که از آن ایجاد خواهد شد. در واقع نام کلاس معرف نوع (type) اشیای خود است.

نمونه‌سازی (Instantiation)
--------------------------------------------------------

به عملیات ایجاد یک شی از کلاس **نمونه‌سازی (Instantiation)** گفته می‌شود. کلاس چیزی جز تکه کدی نوشته شده نیست و جایی در حافظه ندارد، این اشیا ایجاد شده از کلاس هستند که در حافظه (Memory) قرار می‌گیرند. نمونه‌سازی از یک کلاس در زبان پایتون به صورت زیر انجام می‌شود::

    >>> class Sample():
    ...     pass
    ... 
    >>> 

    >>> sample_object = Sample()  # Instantiation

    >>> type(sample_object)
    <class '__main__.Sample'>

در زبان پایتون وقتی در سمت راست عملگر انتساب نام کلاس ذکر گردد - همچون فراخوانی یک تابع - یک شی از آن کلاس ایجاد می‌گرد. 

از هر کلاس می‌توان بی‌نهایت نمونه‌سازی داشت. هر شی از یک کلاس، حوزه (Scope) مخصوص به خود را دارد که جدا از دیگر اشیا آن کلاس خواهد بود. بنابراین اشیا هر کلاس کاملا مستقل و ایزوله (isolated) از یکدیگر هستند. 



متد (Method)
-----------------------------------------------------

متدها در واقع توابعی هستند که داخل هر کلاس تعریف می‌شوند. هر کلاس پایتون می‌تواند شامل سه نوع متد باشد:

* Instance Method
* Class Method
* Static Method

.. code-block:: python
    :linenos:

    class Sample():
    
        def instance_method(self):
            pass
    
        @classmethod
        def class_method(cls):
            pass
    
        @staticmethod
        def static_method():
            pass
    


متد شی (Instance Method)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

رایج‌ترین نوع متد در پایتون است. برای ایجاد این متد نیازی به دکوراتور (Decorator‌ - درس سیزدهم) نیست. همانطور که از نام این متد مشخص است این متد تنها از سوی اشیا یک کلاس قابل استفاده است. هر شی از کلاس صفات (Attributes - *کمی جلوتر شرح داده خواهد شد*) خاص خود را دارد که از این متدها می‌توان برای دستیابی، دستکاری و مدیریت آن‌ها استفاده کرد.




متد کلاس (Class Method)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~



متد ایستا (Static Method)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


متدهای جادویی (Magic methods)
-----------------------------------------------------



صفات (Attributes)
-----------------------------------------------------

صفات یا ویژگی‌ها که در شی گرایی 


|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <https://www.coderz.ir/python-oop/>`_



