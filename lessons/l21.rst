.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش شی گرایی در پایتون، OOP در پایتون،  Decorators در پایتون، Descriptors در پایتون، property@ در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, Decorators, کتابخانه, پایتون, شی گرایی در پایتون, Descriptors,property@ 


درس ۲۱: شی گرایی (OOP) در پایتون: __Descriptors ،Decorator ،__slots و property@
===================================================================================================


توجه داشته باشید، هم اکنون پشتیبانی نسخه 2x پایتون به پایان رسیده است. بنابراین	همانند دروس پیش شی گرایی و به منظور جلوگیری از پیچیدگی‌های غیر ضروری، تمام مطالب این درس بر مبنای پایتون 3x ارائه می‌شود.



:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----


__slots__
----------------------------

پیش از هر توضیحی به نمونه کد زیر توجه نمایید:


.. code-block:: python
    :linenos: 

    class Sample:
        def __init__(self, a, b):
            self.a = a
            self.b = b


    objet = Sample(1, 2)
    print(objet.__dict__)

    print('-' * 30)

    objet.c = 3
    print(objet.__dict__)

    print('-' * 30)

    objet.__dict__['d'] = 4
    print(objet.__dict__)
    print(objet.d)

::

    {'a': 1, 'b': 2}
    ------------------------------
    {'a': 1, 'b': 2, 'c': 3}
    ------------------------------
    {'a': 1, 'b': 2, 'c': 3, 'd': 4}
    4

پیشتر نیز صحبت کرده بودیم، می‌توان پس از ایجاد یک شی به آن Attribute اضافه کنیم (به دو سطر ۱۲ و ۱۷ توجه نمایید). داده‌های مربوط به تمام Attributeهای یک شی توسط یک شی دیکشنری که از طریق ``__dict__`` در دسترس می‌باشد، نگهداری می‌شود.  

``__slots__`` [`اسناد پایتون <https://docs.python.org/3/reference/datamodel.html#slots>`__] یک Attribute ویژه در پایتون می‌باشد که با مقداردهی آن می‌توان از ایجاد ``__dict__`` جلوگیری و در نتیجه قابلیت افزودن Attribute جدید به شی را غیرفعال و تعداد Attributeهای آن را از همان نقطه ایجاد، ثابت نگه‌داشت:


.. code-block:: python
    :linenos: 

    class Sample:

        __slots__ = ('a', 'b')

        def __init__(self, a, b):
            self.a = a
            self.b = b


    objet = Sample(1, 2)
    print(objet.__dict__)

::

    Traceback (most recent call last):
      File "sample.py", line 11, in <module>
        print(objet.__dict__)
    AttributeError: 'Sample' object has no attribute '__dict__'


از مزایای ``__slots__`` می‌توان به کاهش مصرف حافطه (RAM) به خصوص در مورد کلاس‌هایی که قرار است اشیایی خیلی زیادی از آن‌ها ایجاد گردد، اشاره نمود.


از طریق ``__slots__`` همچنین می‌توان اجازه داد که کدام Attribute در آینده برای شی ایجاد گردد:

.. code-block:: python
    :linenos: 

    class Sample:

        __slots__ = ('a', 'b', 'c')

        def __init__(self, a, b):
            self.a = a
            self.b = b

    objet = Sample(1, 2)

    objet.c = 3

    print('a: ', objet.a)
    print('b: ', objet.b)
    print('c: ', objet.c)

    objet.d = 4

::


    a:  1
    b:  2
    c:  3
    Traceback (most recent call last):
      File "sample.py", line 17, in <module>
        objet.d = 4
    AttributeError: 'Sample' object has no attribute 'd'



**اکنون نمونه کد زیر را در وضعیت وراثت در نظر بگیرید:**

.. code-block:: python
    :linenos: 

    class Parent:
        def __init__(self, a, b):
            self.a = a
            self.b = b


    class Child(Parent):
        def __init__(self, a, b):
            super().__init__(a, b)


    child = Child(1, 2)
    print(child.__dict__)

    child.c = 3
    print(child.__dict__)

    print('a: ', child.a)
    print('b: ', child.b)
    print('c: ', child.c)

::

    {'a': 1, 'b': 2}
    {'a': 1, 'b': 2, 'c': 3}
    a:  1
    b:  2
    c:  3


اگر کلاس Parent شامل ``__slots__`` باشد و در نتیجه فاقد ``__dict__``:

.. code-block:: python
    :linenos: 

    class Parent:
        __slots__ = ('a', 'b')

        def __init__(self, a, b):
            self.a = a
            self.b = b


    class Child(Parent):

        def __init__(self, a, b):
            super().__init__(a, b)


    child = Child(1, 2)
    print(child.__dict__)

    child.c = 3
    print(child.__dict__)

    print('a: ', child.a)
    print('b: ', child.b)
    print('c: ', child.c)


::

     {}
     {'c': 3}
     a:  1
     b:  2
     c:  3

اگر هر دو کلاس شامل ``__slots__`` باشند:

.. code-block:: python
    :linenos: 

    class Parent:
        __slots__ = ('a', 'b')

        def __init__(self, a, b):
            self.a = a
            self.b = b


    class Child(Parent):
        __slots__ = ('c')

        def __init__(self, a, b):
            super().__init__(a, b)


    child = Child(1, 2)

    child.c = 3
    print('a: ', child.a)
    print('b: ', child.b)
    print('c: ', child.c)

::

    a:  1
    b:  2
    c:  3


**در وراثت چندگانه،** چنانچه ``__slots__`` مربوط به superclassها حاوی مقدار تکراری باشد، آنگاه باعث بروز خطا می‌گردد:

.. code-block:: python
    :linenos: 

    class ParentOne:
        __slots__ = ('a', 'b')

    class ParentTwo:
        __slots__ = ('z', 'b')


    class Child(ParentOne, ParentTwo):
        __slots__ = ('c')


    child = Child()

::

    Traceback (most recent call last):
      File "sample.py", line 8, in <module>
        class Child(ParentOne, ParentTwo):
    TypeError: multiple bases have instance lay-out conflict


بهتر است superclassها حاوی یک ``__slots__`` خالی (شی تاپل خالی) باشند و هر subclass خود محتوای ``__slots__`` خود را تعریف نماید:

.. code-block:: python
    :linenos: 

    class ParentOne:
        __slots__ = ()

    class ParentTwo:
        __slots__ = ()


    class Child(ParentOne, ParentTwo):
        __slots__ = ('a', 'b', 'z', 'c')


    child = Child()


|


[`مطلب مرتبط در StackOverflow <https://stackoverflow.com/a/28059785>`__]

Decorators
----------------------------

از درس سیزدهم با مفهوم Decoratorها و نیز کاربرد آن‌ها به همراه تابع در زبان برنامه‌نویسی پایتون آشنا شده‌ایم، در این بخش به بررسی Decoratorهابه همراه کلاس‌ها و متدها می‌پردازیم.

علاوه بر اینکه با استفاده از کلاس می‌توان یک Decorator ایجاد کرد، از Decorator‌ها نیز می‌توان بر روی کلاس یا متدهای داخل یک کلاس بهره گرفت. در ادامه به بررسی این موارد می‌پردازیم.


قراردادن Decorator بر روی متد
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

این کار همانند قراردادن Decorator بر روی تابع می‌باشد (درس سیزدهم) و تفاوتی ندارد. پیش‌تر نیز از Decoratorهایی همچون ``classmethod@`` یا ``staticmethod@`` بر روی متدها استفاده می‌کردیم. به مثالی در همین زمینه توجه نمایید:


.. code-block:: python
    :linenos:

    import functools

    def debug(func):
        """Print the function signature and return value
           Source: https://realpython.com/primer-on-python-decorators/#debugging-code"""

        @functools.wraps(func)
        def wrapper_debug(*args, **kwargs):
            args_repr = [repr(a) for a in args]                     
            kwargs_repr = [f"{k}={v!r}" for k, v in kwargs.items()]
            signature = ", ".join(args_repr + kwargs_repr)      
            print(f"Calling {func.__name__}({signature})")
            value = func(*args, **kwargs)
            print(f"{func.__name__!r} returned {value!r}")       
            return value
        return wrapper_debug



    class Sample:

        @debug
        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y


    sample = Sample(5, y=6)

::

    Calling __init__(<__main__.Sample object at 0x7fd96ddec8d0>, 5, y=6)
    '__init__' returned None

در نمونه کد بالا یک Decorator با نام ``debug`` ایجاد گردیده است (Decorator درس سیزدهم و f-string درس هفتم)، با قراردادن این Decorator بر روی یک تابع یا متد: نام تابع، آرگومان‌های ارسال شده و همچنین مقدار خروجی تابع را بر روی خروجی نمایش می‌دهد.



قراردادن Decorator بر روی کلاس
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

در زبان برنامه‌نویسی پایتون می‌توان یک Decorator را به کل یک کلاس اعمال کرد، در این صورت نیز تفاوتی با آنچه در توابع دیدم، نمی‌کند. تنها در این حالت، این کلاس است که به Decorator ارسال می‌گردد. دو نمونه کد زیر معادل یکدیگر هستند::


    def decorator_name(a_class):
        def wrapper():
            # Do Something!
            print('Class name:', a_class.__name__)
            return a_class()

        return wrapper


::

     # 1

     @decorator_name
     class Sample():
         pass


     sample = Sample()


::

      # 2

      class Sample():
          pass

      SampleWrapper = decorator_name(Sample)
      sample = SampleWrapper()


::

      # Output

      Class name: Sample



کلاس به عنوان Decorator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

در زبان برنامه‌نویسی پایتون می‌توان از کلاس‌ها همچون توابع برای ایجاد Decorator استفاده کرد. در این صورت شی‌ای که Decorator به آن اعمال شده است از طریق متد ``__init__`` دریافت می‌گردد. همچنین می‌بایست متد ``__call__`` را پیاده‌سازی کرده باشیم تا اشیای کلاس قابلیت callable را داشته باشند (درس هفدهم)، عملیات اصلی Decorator می‌بایست داخل این متد پیاده‌سازی گردد:



::

    class CountCalls:
        def __init__(self, func):
            self.func = func
            self.num_calls = 0

        def __call__(self):
            self.num_calls += 1
            print(f"Call {self.num_calls} of {self.func.__name__!r}")
            return self.func()

::

    # 1

    @CountCalls
    def func():
        ''' a function'''

    print(func.__doc__)
    func()
    func()


::

    # 2

    def func():
        ''' a function'''

    obj = CountCalls(func)

    print(obj.__doc__)
    obj()
    obj()


::


    # Output

    None
    Call 1 of 'func'
    Call 2 of 'func'



**functools.update_wrapper**

همانند کاربرد تابع ``wraps`` از ماژول ``functools`` در هنگام ساخت Decorator از توابع، در اینجا نیز می‌توانیم جهت حفظ اطلاعات مربوط به تابع اصلی، این‌بار از تابع ``update_wrapper`` این ماژول استقاده کنیم [`اسناد پایتون <https://docs.python.org/3/library/functools.html#functools.update_wrapper>`__] - اگر کلاس CountCalls را به صورت زیر تغییر دهیم، آنگاه خروجی هر دو حالت نیز به شرح زیر تغییر خواهد کرد، چرا که اکنون ``__doc__`` در دسترس باقی مانده است::


    import functools

    class CountCalls:
        def __init__(self, func):
            functools.update_wrapper(self, func)
            self.func = func
            self.num_calls = 0

        def __call__(self):
            self.num_calls += 1
            print(f"Call {self.num_calls} of {self.func.__name__!r}")
            return self.func()


::

     a function
     Call 1 of 'func'
     Call 2 of 'func'


Descriptors
----------------------------

توصیف‌گر (Descriptor) کلاسی است که کنترل عملیات‌های دریافت (get)، تنظیم (set) و حذف (delete) را بر روی یک attribute از شی‌ای دیگر را فراهم می‌کند. Descriptor یک راهکار پایتونی (Pythonic) برای ایجاد مکانیزم get & set رایج در دیگر زبان‌های برنامه‌نویسی می‌باشد.

**چگونه می‌توان یک Descriptor در پایتون ایجاد کرد؟** [`اسناد پایتون <https://docs.python.org/3/reference/datamodel.html#implementing-descriptors>`__]

۱- یک کلاس ایجاد کنیم که در آن حداقل یکی از متدهای خاص ``__set__`` ،``__get__`` و ``__delete__`` بازپیاده‌سازی (یا بهتر است بگوییم Override) شود.

۲- از شی این کلاس به عنوان attribute مناسب از کلاس مورد نظر استفاده کنیم.


**کاربرد Descriptor پایتون چیست؟**

هر زمان بخواهیم رویدادهایی همچون دریافت (get)، تنظیم (set) و حذف (delete) را بر روی یک attribute کنترل کنیم. برای مثال کلاسی شامل یک attribute با نام ایمیل (email) است، می‌خواهیم پیش از تنظیم مقدار بر روی این فیلد، مقدار جدید به صورت خودکار اعتبارسنجی (Validation) شود و در صورت صحت عملیات انجام شود:


.. code-block:: python
    :linenos:


    import re

    class EmailField:

        def __init__(self, email=None):
            self.email = email

        def __get__(self, instance, owner=None):
            print('-' * 10, 'CALLED[__get__]')
            print('instance:', instance)
            print('owner:', owner)
            print('-' * 30)
            print()

            return self.email

        def __set__(self, instance, value):
            print('-' * 10, 'CALLED[__set__]')
            print('instance:', instance)
            print('value:', value)
            print('-' * 30)

            if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$', value):
                self.email = value
                print('Successful!\n')
            else:
                print(f'{value} is not a valid email!\n')


    class Student:
        email = EmailField()


    obj = Student()

    email = obj.email               # CALLED[__get__]

    obj.email = 'python$$1400'      # CALLED[__set__]

    obj.email = 'python@coderz.ir'  # CALLED[__set__]

    print(obj.email)                # CALLED[__get__]


::

    ---------- CALLED[__get__]
    instance: <__main__.Student object at 0x7f828bb9f4e0>
    owner: <class '__main__.Student'>
    ------------------------------

    ---------- CALLED[__set__]
    instance: <__main__.Student object at 0x7f828bb9f4e0>
    value: python$$1400
    ------------------------------
    python$$1400 is not a valid email!

    ---------- CALLED[__set__]
    instance: <__main__.Student object at 0x7f828bb9f4e0>
    value: python@coderz.ir
    ------------------------------
    Successful!

    ---------- CALLED[__get__]
    instance: <__main__.Student object at 0x7f62e42c64e0>
    owner: <class '__main__.Student'>
    ------------------------------

    python@coderz.ir


در نمونه کد، بالا کلاس ``EmailField`` یک Descriptor برای اتریبیوت ``email`` از کلاس ``Student`` می‌باشد. همانطور که مشاهده می‌شود، هرگاه مقداری به ``email`` انتساب داده می‌شود (سطرهای ۳۸ و ۴۰)، به صورت خودکار متد ``__set__`` از کلاس Descriptor آن فراخوانی می‌گردد و به همین ترتیب هرگاه مقدار آن درخواست می‌گردد (سطرهای ۳۶ و ۴۲)، متد ``__get__`` فراخوانی می‌گردد.

پیشنهاد می‌شود در صورت امکان مقدار attribute را توسط Descriptor نگهداری نکنید و از Descriptor تنها برای انجام عملیات‌ مربوطه استفاده نمایید. بنابراین مثال قبل را می‌توانیم به صورت زیر بازنویسی نماییم:


.. code-block:: python
    :linenos:

    import re

    class EmailField:

        def __init__(self, attr_name):
            self.attr_name = attr_name

        def __get__(self, instance, owner=None):
            return instance.__dict__.get(self.attr_name)

        def __set__(self, instance, value):
            if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$', value):
                instance.__dict__[self.attr_name] = value


    class Student:
        email = EmailField('email')


    obj = Student()
    obj.email = 'python@coderz.ir'

    print(obj.email)


::

    python@coderz.ir


در این روش تنها نام attribute نگهداری و از آن برای دستیابی به مقدار آن attribute، از طریق خود شی اقدام کردیم.

اگر از **نسخه 3.6 به بعد پایتون** بهره‌مند هستید،‌ با استفاده از متد ``__set_name__`` [`اسناد پایتون <https://docs.python.org/3/reference/datamodel.html#object.__set_name__>`__] در کلاس Descriptor، دیگر حتی نیازی به پیاده‌سازی متد ``__init__`` و ارسال دستی نام attribute هم نخواهد بود:


.. code-block:: python
    :linenos:

    import re

    class EmailField:

        def __set_name__(self, owner, name):
            self.attr_name = name

        def __get__(self, instance, owner=None):
            return instance.__dict__.get(self.attr_name)

        def __set__(self, instance, value):
            if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$', value):
                instance.__dict__[self.attr_name] = value


    class Student:
        email = EmailField()


.. tip:: 

  از Descriptor تنها برای Class Attributeها می‌توان استفاده کرد.




property@
----------------------------

خیلی ساده، این دکوراتور (``property@``) را می‌توان یک Descriptor سطح بالا دانست که توسط کتابخانه استاندارد پایتون برای Instance Attributeها فراهم آورده شده است. به نمونه کد زیر توجه نمایید:

.. code-block:: python
    :linenos:

    import re

    class Contact:

        def __init__(self, name, phone):
            self._name = name
            self._phone = phone

        @property
        def name(self):
            return self._name
	
        @name.setter
        def name(self, new_name):
            if new_name and len(new_name) > 0:
                self._name = new_name
            else:
                print("Please enter a valid name")

        @name.deleter
        def name(self):
            del self._name

        @property
        def phone(self):
            return self._phone


        @phone.setter
        def phone(self, new_phone):
            if re.match(r'^09\d{9}$', new_phone):
                self._phone = new_phone
            else:
                print("Please enter a valid phone")

        @phone.deleter
        def phone(self):
            del self._phone


    obj = Contact(name='Saeid', phone='09999999999')

    obj.phone = '09123456'
    print('-' * 30)
    print(obj.name)
    print(obj.phone)


::

     Please enter a valid phone
     ------------------------------
     Saeid
     09999999999


در این مثال، کلاس ``Contact`` حاوی دو Instance Attribute با نام‌های ``name`` و ``phone`` می‌باشد. برای اینکه بتوانیم رویدادهایی همچون دریافت (get)، تنظیم (set) و حذف (delete) را بر روی آن‌ها کنترل کنیم، از دکوراتور ``property@`` استفاده کردیم. به این صورت که:

**۱-** نخست باید توجه داشت که نام Attributeها با یک کاراکتر ``_`` شروع کردیم. با این کار به دیگر برنامه‌نویسان خواهیم گفت که این Attribute با سطح دسترسی protected می‌باشد (درس بیستم)::

    def __init__(self, name, phone):
        self._name = name
        self._phone = phone

**۲-** برای هر کدام یک متد getter ساختیم و به آن دکوراتور ``property@`` انتساب دادیم. نام این متد را همنام با Attributeها ولی بدون ``_`` انتخاب کردیم::

    @property
    def name(self):
        return self._name

    @property
    def phone(self):
        return self._phone   


نام این متد هر چیزی انتخاب شود، در زمان درخواست مقدار Attribute باید از این نام (به جای نام اصلی Attribute) استفاده گردد (سطرهای ۴۵ و ۴۶).

**۳-** اکنون می‌توانیم دو متد دیگر برای عملیات set و delete پیاده‌سازی کنیم و به آن‌ها دکوراتورهای زیر را انتساب دهیم::

     @<property_getter_method_name>.setter
     @<property_getter_method_name>.deleter


بخش نخست از نام دکوراتور (property_getter_method_name) می‌بایست همان نام متد getter باشد.

در این مثال ما از همان نام متد getter برای نام‌گذاری این دو متد استفاده کردیم. ولی باید توجه داشته باشید که نام این دو متد هر چیزی انتخاب شود، در زمان تنظیم مقدار (سطر ۴۳) یا حذف Attribute باید از این نام (به جای نام اصلی Attribute) استفاده گردد.



.. tip:: 

  از ``property@`` تنها برای Instance Attributeها می‌توان استفاده کرد.

|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <https://www.coderz.ir/python-tutorial-oop-slots-descriptors-property>`_



