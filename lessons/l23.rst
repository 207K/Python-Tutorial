.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش شی گرایی در پایتون، OOP در پایتون، دیتا کلاس در پایتون، Data Classe در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, Data Class, کتابخانه, پایتون, شی گرایی در پایتون


درس ۲۳: مدیریت خطا در پایتون: Exception ،Error و Warning
===================================================================================================

.. figure:: /_static/pages/23-python-exception-error-warning-try.jpg
    :align: center
    :alt: مدیریت خطا در پایتون: Warning ،Error ،Exception و try/except/else/finally

    Photo by `krakenimages <https://unsplash.com/photos/8RXmc8pLX_I>`__
  




توجه داشته باشید، هم اکنون پشتیبانی نسخه 2x پایتون به پایان رسیده است. بنابراین	به منظور جلوگیری از پیچیدگی‌های غیر ضروری، تمام مطالب این درس بر مبنای پایتون 3x ارائه می‌شود.



:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----


مقدمه
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

بروز **خطا (Error)** همواره جزیی از برنامه‌نویسی بوده و هست. خطاهای برنامه‌نویسی انواع گوناگونی دارند؛ «خطاهای زمان کامپایل» (Compile-time errors) که آنقدر فاحش هستند که مانع از اجرای برنامه خواهند شد و برخی دیگر که می‌توانند آنقدر ناقلا باشند که تا مدت‌ها پس از اجرا نیز خودشان را نشان ندهند! به این دسته از خطاها به اصطلاح «خطاهای زمان اجرا» (Runtime errors) می‌گویند.

**«خطاهای زمان کامپایل» (Compile-time errors)** حاصل اشتباه برنامه‌نویس بوده و معمولا نیز کشف و برطرف نمودن آن‌ها نیز بسیار ساده می‌باشد و از عدم رعایت درست قواعد زبان برنامه‌نویسی مانند سینتکس نشات می‌گیرند.

اما بروز **«خطاهای زمان اجرا» (Runtime errors)** می‌تواند به عوامل گوناگونی وابسته باشد همانند مشکلات سخت‌افزاری که ناگهان به برنامه تحمیل می‌گردد که اگر از فرض این احتمال نیز صرف نظر کنیم!، باز هم برای دفاع در برابر این دسته از خطاها، برنامه‌نویس می‌بایست کاملا هوشیار باشد. به خصوص در زبان‌های برنامه‌نویسی پویا به مانند پایتون که انواع داده در زمان اجرا تعیین می‌گردند. برای مثال فرض کنید در داخل یک تابع قرار است با یک نوع ``int`` کار شود ولی به علت ضعف برنامه‌نویسی و عدم کنترل ورودی‌ها، یک داده با نوع ``str`` به آن ارسال گردد که در این صورت نتیجه مشخص است! البته جلوگیری از این دست خطاها نیز همچنان ساده می‌باشد!. گاهی ممکن است وضعیت آنچنان مهلک باشد که یا خیلی دیر به وجود یک خطا در برنامه پی ببریم یا برای کشف علت آن زمان زیادی صرف کنیم یا هر دو! به این نوع از خطاهای زمان اجرا، «خطاهای منطقی» (Logical errors) گفته می‌شود.

**«خطاهای منطقی» (Logical errors)** برخلاف دیگر خطاها باعث توقف اجرای برنامه نشده بلکه باعث تولید نتایج نادرستی می‌شوند که از دیدگاه برنامه‌نویسی درست بوده ولی از دیدگاه منطقی کاملا اشتباه هستند. به عنوان یک مثال ساده فرض کنید فرمول محاسبه معدل اشتباه پیاده‌سازی شده باشد! این نوع خطا مصداق بارز «باگ» (Bug) در برنامه است که همیشه پیشگیری، از کشف و اصلاح آن‌ها به مراتب ساده‌تر خواهد بود.


با وجود این توضیحات و همانطور که مشاهده خواهید کرد، بروز خطا همواره یک امر زشت و ناخواسته نبوده بلکه گاهی نیز یک استراتژی از سوی برنامه‌نویس خواهد بود تا یک وضعیت را به سطوح دیگر از برنامه اعلام یا اینکه مستقیما تغییری در روند اجرای برنامه ایجاد کند. در این صورت خطاها دیگر با نام زشت خطا خوانده نمی‌شوند بلکه به آنها **استثنا یا Exception** می‌گویند.


به صورت کلی، **استثنا یا Exception** امکانی برای خروج برنامه از یک وضعیت مشخص است و بروز آن، همانند اعلام عمومی یک خبر مهم در برنامه می‌باشد. می‌توان با پیش‌بینی بروز Exceptionها در برنامه، به اصطلاح آن‌ها را **catch** نمود و فرآیندی را برای مدیریت آن‌ها پیاده‌سازی کرد. 

درک وقوع یک Exception و امکان ایجاد یک فرآیند برای مدیریت آن، قابلیت مهمی در یک زبان‌برنامه‌نویسی محسوب می‌شود. چرا که می‌توان از آن در دو نقش زیر بهره گرفت:

**۱) مدیریت خطا (Error handling):** هر Exception می‌تواند معرف یک نوع خطا یا وضعیتی نادرست در برنامه باشد، می‌توان بر اساس نوع Exception و خطایی که رخ داده برای آن از پیش چاره‌اندیشی و فرآیندی را برای مدیریت آن خطا در برنامه پیش‌بینی کرد.


**۲) اطلاع‌رسانی یک رویداد (Event notification):** از Exceptionها می‌توان برای اعلام وقوع یک حادثه مثبت نیز در برنامه استفاده کرد. به این صورت می‌توان در زمان اجرای برنامه و بر حسب شرایط، روند اجرای برنامه را تغییر داد.

|

|

به زبان برنامه‌نویسی پایتون برمی‌گردیم. انواع خطاها در پایتون را می‌توان در دو دسته کلی زیر در نظر گرفت:

* خطاهای سینتکس (Syntax errors)

* خطاهای منطقی (Logical errors)

برای درک این دسته‌بندی و مطابقت دادن آن با توضیحات پیش لازم است تا بار دیگر به روند اجرای کدهای پایتون توجه نماییم (درس سوم - پشت صحنه اجرا).








|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <https://www.coderz.ir/python-tutorial-oop-type-hinting-data-class>`_



