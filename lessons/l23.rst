.. role:: emoji-size

.. meta::
   :description: کتاب آموزش زبان برنامه نویسی پایتون به فارسی، آموزش شی گرایی در پایتون، OOP در پایتون، دیتا کلاس در پایتون، Data Classe در پایتون
   :keywords:  آموزش, آموزش پایتون, آموزش برنامه نویسی, پایتون, Data Class, کتابخانه, پایتون, شی گرایی در پایتون


درس ۲۳: مدیریت خطا در پایتون: Exception ،Error و Warning
===================================================================================================

.. figure:: /_static/pages/23-python-exception-error-warning-try.jpg
    :align: center
    :alt: مدیریت خطا در پایتون: Warning ،Error ،Exception و try/except/else/finally

    Photo by `krakenimages <https://unsplash.com/photos/8RXmc8pLX_I>`__
  




توجه داشته باشید، هم اکنون پشتیبانی نسخه 2x پایتون به پایان رسیده است. بنابراین	به منظور جلوگیری از پیچیدگی‌های غیر ضروری، تمام مطالب این درس بر مبنای پایتون 3x ارائه می‌شود.



:emoji-size:`✔` سطح: متوسط

----


.. contents:: سرفصل‌ها
    :depth: 2

----


مقدمه
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

بروز **خطا (Error)** همواره جزیی از برنامه‌نویسی بوده و هست. خطاهای برنامه‌نویسی انواع گوناگونی دارند؛ «خطاهای زمان کامپایل» (Compile-time errors) که آنقدر فاحش هستند که مانع از ترجمه کدهای برنامه به زبان ماشین و در نهایت اجرای آن خواهند شد و برخی دیگر که می‌توانند آنقدر ناقلا باشند که تا مدت‌ها پس از اجرا نیز خودشان را نشان ندهند! به این دسته از خطاها به اصطلاح «خطاهای زمان اجرا» (Runtime errors) می‌گویند.

**«خطاهای زمان کامپایل» (Compile-time errors)** حاصل اشتباه فاحش برنامه‌نویس بوده و معمولا نیز کشف و برطرف نمودن آن‌ها نیز بسیار ساده می‌باشد و از عدم رعایت درست قواعد زبان برنامه‌نویسی مانند سینتکس نشات می‌گیرند.

اما بروز **«خطاهای زمان اجرا» (Runtime errors)** می‌تواند به عوامل گوناگونی وابسته باشد همانند مشکلات سخت‌افزاری که ناگهان به برنامه تحمیل می‌گردد که اگر از فرض این احتمال نیز صرف نظر کنیم!، باز هم برای دفاع در برابر این دسته از خطاها، برنامه‌نویس می‌بایست کاملا هوشیار باشد. به خصوص در زبان‌های برنامه‌نویسی پویا به مانند پایتون که انواع داده در زمان اجرا تعیین می‌گردند. برای مثال فرض کنید در داخل یک تابع قرار است با یک نوع ``int`` کار شود ولی به علت ضعف برنامه‌نویسی و عدم کنترل ورودی‌ها، یک داده با نوع ``str`` به آن ارسال گردد که در این صورت نتیجه مشخص است! البته جلوگیری از این دست خطاها نیز همچنان ساده می‌باشد!. گاهی ممکن است وضعیت آنچنان مهلک باشد که یا خیلی دیر به وجود یک خطا در برنامه پی ببریم یا برای کشف علت آن زمان زیادی صرف کنیم یا هر دو! به این نوع از خطاهای زمان اجرا، «خطاهای منطقی» (Logical errors) گفته می‌شود.

**«خطاهای منطقی» (Logical errors)** برخلاف دیگر خطاها باعث توقف اجرای برنامه نشده بلکه باعث تولید نتایج نادرستی می‌شوند که از دیدگاه برنامه‌نویسی درست بوده ولی از دیدگاه منطقی کاملا اشتباه هستند. به عنوان یک مثال ساده فرض کنید فرمول محاسبه معدل اشتباه پیاده‌سازی شده باشد! این نوع خطا مصداق بارز «باگ» (Bug) در برنامه است که همیشه پیشگیری، از کشف و اصلاح آن‌ها به مراتب ساده‌تر خواهد بود.


با وجود این توضیحات و همانطور که مشاهده خواهید کرد، بروز خطا همواره یک امر زشت و ناخواسته نبوده بلکه گاهی نیز یک استراتژی از سوی برنامه‌نویس خواهد بود تا یک وضعیت را به سطوح دیگر از برنامه اعلام یا اینکه مستقیما تغییری در روند اجرای برنامه ایجاد کند. در این صورت خطاها دیگر با نام زشت خطا خوانده نمی‌شوند بلکه به آنها **استثنا یا Exception** می‌گویند.


به صورت کلی، **استثنا یا Exception** امکانی برای خروج برنامه از یک وضعیت مشخص است و بروز آن، همانند اعلام عمومی یک خبر مهم در برنامه می‌باشد. می‌توان با پیش‌بینی بروز Exceptionها در برنامه، به اصطلاح آن‌ها را **catch** نمود و فرآیندی را برای مدیریت آن‌ها پیاده‌سازی کرد. 

درک وقوع یک Exception و امکان ایجاد یک فرآیند برای مدیریت آن، قابلیت مهمی در یک زبان‌برنامه‌نویسی محسوب می‌شود. چرا که می‌توان از آن در دو نقش زیر بهره گرفت:

**۱) مدیریت خطا (Error handling):** هر Exception می‌تواند معرف یک نوع خطا یا وضعیتی نادرست در برنامه باشد، می‌توان بر اساس نوع Exception و خطایی که رخ داده برای آن از پیش چاره‌اندیشی و فرآیندی را برای مدیریت آن خطا در برنامه پیش‌بینی کرد.


**۲) اطلاع‌رسانی یک رویداد (Event notification):** از Exceptionها می‌توان برای اعلام وقوع یک حادثه مثبت نیز در برنامه استفاده کرد. به این صورت می‌توان در زمان اجرای برنامه و بر حسب شرایط، روند اجرای برنامه را تغییر داد.

|

به زبان برنامه‌نویسی پایتون برمی‌گردیم. انواع خطاها در پایتون را می‌توان در دو دسته کلی زیر در نظر گرفت:

* خطای سینتکس (Syntax error)

* خطای زمان اجرا (Runtime error)

برای درک این دسته‌بندی و مطابقت دادن آن با توضیحات پیش لازم است تا بار دیگر به روند اجرای کدهای پایتون توجه نماییم (درس سوم - پشت صحنه اجرا). می‌دانیم پایتون یک زبان مفسری است، ولی پیش‌ از اجرا، کدهای پایتون به یک زیان میانی به نام بایت‌کد (ByteCode) ترجمه یا کامپایل می‌شوند؛ در این مرحله قواعد پایتون بررسی و در صورتی که مشکل یا خطایی وجود نداشته باشد، بایت‌کد ایجاد و به اجرا در می‌آید. خطاهایی که در این مرحله (تلاش برای ترجمه و ایجاد بایت‌کد) ممکن است رخ دهند، **خطای سینتکس (Syntax error)** نامیده می‌شوند.

زمانی که برنامه پایتونی به اجرا درمی‌آید، یعنی از نظر رعایت قوانین یا سینتکس مشکلی وجود نداشته است، بنابراین باقی خطاها در زمان اجرا رخ خواهند داد. در زبان برنامه‌نویسی پایتون تمام خطاهای زمان اجرا در قالب یک Exception اعلام یا به اصطلاح **raise** خواهند شد.


ردیابی خطا در پایتون (Traceback)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

پس از وقوع یک خطا در زمان اجرای یک برنامه پایتونی، برای ردیابی و کشف علت رخ دادن آن خطا از Traceback استفاده می‌گردد. منظور از **Traceback**، گزارشی است که جهت راهنمایی برنامه‌نویس در هنگام وقوع یک خطای زمان اجرا، توسط مفسر پایتون ارائه داده می‌شود و گاهی نیز از آن به عنوان **Stack Trace** یاد می‌شود:


.. code-block:: python
    :linenos:
    
    def sum_int(a, b):
        return a + b
    
    res = sum_int(2, 3)
    print(res)

    res = sum_int(3, 'C')
    print(res)

::

    5
    Traceback (most recent call last):
      File "sample.py", line 7, in <module>
        res = sum_int(3, 'C')
      File "sample.py", line 2, in sum_int
        return a + b
    TypeError: unsupported operand type(s) for +: 'int' and 'str'

نمونه کد بالا نمایش مثالی از بروز خطا در زمان اجراست که پیش‌تر نیز به آن اشاره کردیم. در این مثال، یک اسکریپت با نام ``sample.py`` ایجاد کرده‌ایم و کد بالا در آن درج گردیده است. تابع ``sum_int`` یک بار با مقدار قابل پذیریش (هر دو از نوع ``int``) فراخوانی می‌گردد (سطر ۴) و نتیجه (یعنی مقدار ``5``) نیز با موفقیت در خروجی چاپ می‌گردد (توسط دستور موجود در سطر ۵). اما در سطر هفتم، آرگومان‌هایی با نوع نامتناسب برای عملگر جمع ریاضی (``+``) ارسال می‌گردد و باعث بروز یک خطا یا اگر بهتر بگوییم، raise شدن یک Exception به نام ``TypeError`` می‌گردد.

خروجی حاصل از وقوع Exception فوق نمایش Traceback در پایتون می‌باشد. Traceback پایتون یک راهنمایی کامل از نوع Exception و مراتب وقوع آن را به برنامه‌نویس گزارش می‌دهد که درک درست آن یک الزام برای برنامه‌نویسی می‌باشد.

برخلاف برخی دیگر از زبان‌های برنامه‌نویسی به مانند Java باید توجه داشت که Traceback پایتون را  می‌بایست از پایین، یعنی سطر پایانی مورد بررسی قرار داد، این سطر توضیحی از نوع Exception رخ داده را ارائه می‌دهد و از این سطر به بالا مراحلی از روند اجرای برنامه که باعث بروز این Exception شده است را به ترتیب نمایش می‌دهد. ترتیب نمایش مراتب Exception نیز، از نمایش نقطه بروز Exception به قبل می‌باشد. به عنوان نمونه برای مثال قبل، می‌توانیم مشاهده کنیم که گفته شده:

* **نوع Exception چیست؟** Exception از  نوع ``TypeError`` می‌باشد که در زمان استفاده از انواع نادرست از مقادیر  برای عملگر ``+`` رخ داده است که در اینجا، این دو نوع عبارتند از: ``'int' and 'str'``. 

* **Exception در کجا رخ داده است؟‌** در سطر دوم از ``sample.py`` و  داخل بدنه ``sum_int`` و هنگام اجرای دستور ``return a + b``.

* **نقطه قبل از ورود به ناحیه Exception کجا بوده است؟** در سطر هفتم از ``sample.py`` و داخل حوزه ماژول، تابع ``sum_int`` با مقادیر ``3`` و ``'C'`` فراخوانی شده است:‌ ``res = sum_int(3, 'C')``.

* **آیا نقطه قبل‌تری نیز وجود دارد؟** خیر

پایتون تا چندین سطح قبل‌تر از نقطه بروز Exception را توسط Traceback آشکار می‌کند. این امر کمک بسیاری در فهمیدن مسیر رسیدن به Exception را در اختیار برنامه‌نویس قرار می‌دهد.

اکنون اجازه دهید نمونه کد مربوط به مثال قبل یعنی اسکریپت ``sample.py`` را با حفظ مشکل ``TypeError`` و افزودن کمی تغییر برای نمایش **خطای سینتکس (Syntax error)** آماده نماییم، بر همین اساس به  نمونه کد زیر که حاوی دو خطا از نوع Syntax error می‌باشد و خروجی آن در زمان اجرا توجه نمایید:

.. code-block:: python
    :linenos:
    
    def sum_int(a, b)
        return a + b
    
    res = sum_int(2, 3)
    print(res)

    res = sum_int(3, 'C')
    print(res)
    
    
    "

::

    File "sample.py", line 1
        def sum_int(a, b)
                        ^
    SyntaxError: invalid syntax

در نخستین بار اجرای اسکریپت ``sample.py``، پایتون متوجه یک خطای ``SyntaxError`` در سطر یکم می‌شود و جلوی مراحل تبدیل به بایت‌کد و در نهایت اجرای برنامه را در همان نقطه می‌گیرد. طبق توضیحات چاپ شده، خطا مربوط به عدم رعایت سینتکس درست برای تعریف تابع می‌باشد. کاراکتر ``^`` به جایگاه نادرست اشاره می‌کند. در انتهای تعریف سرآیند تابع اشکالی وجود دارد که با کمی دقت می‌توان دریافت که علت به عدم وجود کاراکتر انتهایی سرآیند تابع در پایتون یعنی ``:`` می‌باشد. این مورد را اصلاح کرده و دوباره اقدام به اجرای اسکریپت ``sample.py`` می‌نماییم:


.. code-block:: python
    :linenos:
    
    def sum_int(a, b):
        return a + b
    
    res = sum_int(2, 3)
    print(res)

    res = sum_int(3, 'C')
    print(res)
    
    
    "

::

    File "sample.py", line 11
        "
        ^
    SyntaxError: EOL while scanning string literal

این‌بار فرآیند اجرای برنامه در نقطه‌ای دیگر متوقف می‌گردد، سطر یازدهم از ``sample.py``. این خطا نیز از نوع ``SyntaxError`` می‌باشد ولی با توضیحی متفاوت. متن خطا می‌گوید که نحوه قرار گرفتن کاراکتر ``"`` اشتباه است. سطر یازدهم با یک کاراکتر کوتیشن پایان یافته که جفت آن و نیز عبارت یا دستوری مرتبط با آن در سطر مذکور موجود نمی‌باشد. 

با اصلاح این مشکل، برنامه از حالت ``SyntaxError`` خارج شده و کد اسکریپت ``sample.py`` با موفقیت به بایت‌کد ترجمه و  به اجرا درمی‌آید. اکنون در زمان اجرا، با ``TypeError`` که پیش‌تر بررسی کردیم برخورد خواهیم کرد!


این نکته را نیز در نظر بگیرید - همانطور که اگر به خروجی‌های دقت کرده باشید حتما متوجه شده‌اید در دو حالت مربوط به گزارش خطای مربوط به ``SyntaxError`` خبری از سطر ``:Traceback (most recent call last)``  که در حالت خطای زمان اجرای ``TypeError`` مشاهده کردیم، نمی‌باشد. در واقع این سطر تنها در گزارش خطاهایی که پس از اجرای برنامه رخ دهند (Runtime errors)، نمایش داده خواهد شد. در زمان بررسی و ترجمه کد پایتون به بایت‌کد هرجا مشکلی باشد عملیات در همان نقطه متوقف می‌شود و صرفا گزارشی مبنی بر ابراز آن نقطه به برنامه‌نویس ارايه می‌گردد و نه چیزی که بتوان آن را یک گزارش ردیابی با Traceback نامید چرا که هنوز برنامه به اجرا درنیامده و اصلا نیازی به این کار نیست!




|

----

:emoji-size:`😊` امیدوارم مفید بوده باشه

`لطفا دیدگاه و سوال‌های مرتبط با این درس خود را در کدرز مطرح نمایید. <https://www.coderz.ir/python-tutorial-oop-type-hinting-data-class>`_



